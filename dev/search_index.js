var documenterSearchIndex = {"docs":
[{"location":"#","page":"Home","title":"Home","text":"CurrentModule = BudgetConstraints","category":"page"},{"location":"#BudgetConstraints-1","page":"Home","title":"BudgetConstraints","text":"","category":"section"},{"location":"#Piecewise-Linear-Budget-Constraints-1","page":"Home","title":"Piecewise Linear Budget Constraints","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This generates a complete two-dimensional budget constraints for some unit (person, benefit-unit, household, etc.) for some tax-benefit system. That is, a list points describing the combinations of net income that the unit would get for different values of gross income (or hours worked, wages, etc.).","category":"page"},{"location":"#","page":"Home","title":"Home","text":"See Duncan and Stark in the bibliography for more on the idea.","category":"page"},{"location":"#Usage-1","page":"Home","title":"Usage","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Define a function that returns the net income for some gross value - this could be (e.g.) hours worked, wage, or gross income","category":"page"},{"location":"#","page":"Home","title":"Home","text":"   function getnet( gross :: Real ) :: Real","category":"page"},{"location":"#","page":"Home","title":"Home","text":"I've found the simplest way to do this in Julia is to use nested functions, as in:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"\n\nfunction makebc( pers :: Person, params :: Parameters ) :: BudgetConstraint\n\n    function getnet( gross :: Float64 ) :: Float64\n        # edit the person to change wage, see the tests/minitb.jl\n        persedit = modifiedcopy( pers, wage=gross )\n        rc = calculate( persedit, params )\n        return rc[:netincome]\n    end\n\n    bc = TBComponents.makebc( getnet )\n\n    return bc\nend\n","category":"page"},{"location":"#","page":"Home","title":"Home","text":"where calculate is a call to some function that does a full set of calculations for this person and returns a record which includes a new net income. The call to makebc then generates the budget constraint using getnet. If successful this returns a BudgetConstraint array, which is a collection of x,y points describing all the points where the budget constraint has a change of slope, where x is the gross value and y the net.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The routine is controlled by a BCSettings struct; there is a DEFAULT_SETTINGS constant version of this which I suggest you don't change, apart from perhaps the upper and lower x-bounds of the graph.","category":"page"},{"location":"#Problems/TODO-1","page":"Home","title":"Problems/TODO","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"the tolerance isn't used consistently (see nearlysameline);\nI may be misunderstanding abstract types in the declarations;\npossibly use some definition of point, line, etc. from some standard package.","category":"page"},{"location":"#Piecewise-Linear-Budget-Constraints-2","page":"Home","title":"Piecewise Linear Budget Constraints","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This generates a complete two-dimensional budget constraints for some unit (person, benefit-unit, household, etc.) for some tax-benefit system. That is, a list points describing the combinations of net income that the unit would get for different values of gross income (or hours worked, wages, etc.).","category":"page"},{"location":"#","page":"Home","title":"Home","text":"See Duncan and Stark in the bibliography for more on the idea.","category":"page"},{"location":"#Usage-2","page":"Home","title":"Usage","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Define a function that returns the net income for some gross value - this could be (e.g.) hours worked, wage, or gross income","category":"page"},{"location":"#","page":"Home","title":"Home","text":"   function getnet( gross :: Real ) :: Real","category":"page"},{"location":"#","page":"Home","title":"Home","text":"As in:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"\nfunction make_one_bc( person :: Person, params :: MiniParams ) :: BudgetConstraint\n    data = Dict(\n        :person=>person,\n        :params=>params )\n    bc = BudgetConstraints.makebc( data, test_getnet )\n    return bc\nend\n","category":"page"},{"location":"#","page":"Home","title":"Home","text":"where calculate is a call to some function that does a full set of calculations for this person and returns a record which includes a new net income. The call to makebc then generates the budget constraint using getnet. If successful this returns a BudgetConstraint array, which is a collection of x,y points describing all the points where the budget constraint has a change of slope, where x is the gross value and y the net.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The routine is controlled by a BCSettings struct; there is a DEFAULT_SETTINGS constant version of this which I suggest you don't change, apart from perhaps the upper and lower x-bounds of the graph.","category":"page"},{"location":"#Problems/TODO-2","page":"Home","title":"Problems/TODO","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"the tolerance isn't used consistently (see nearlysameline);\nI may be misunderstanding abstract types in the declarations;\npossibly use some definition of point, line, etc. from some standard package.","category":"page"},{"location":"#Functions-and-Data-Structures-1","page":"Home","title":"Functions and Data Structures","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Modules = [MiniTB]\nOrder   = [ :type, :function]","category":"page"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [BudgetConstraints]","category":"page"},{"location":"#BudgetConstraints.makebc","page":"Home","title":"BudgetConstraints.makebc","text":"Make a budget constraint using function getnet to extract net incomes and settings (see above on this struct). getnet should be a function of the form net=f(gross). See the testcase for an example.\n\n\n\n\n\n","category":"function"}]
}
